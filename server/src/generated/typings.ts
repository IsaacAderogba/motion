/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as ctx from "../resources/Context"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  RegisterInput: { // input type
    avatarURL?: string | null; // String
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
  }
  UserInput: { // input type
    firstName?: string | null; // String
    isVerified?: boolean | null; // Boolean
    lastName?: string | null; // String
    photoId?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  AuthUser: { // root type
    avatarURL?: string | null; // String
    firstName: string; // String!
    id: string; // ID!
    isVerified: boolean; // Boolean!
    lastName: string; // String!
    token: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    avatarId?: string | null; // String
    avatarURL?: string | null; // String
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    isVerified: boolean; // Boolean!
    lastName: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  LoginInput: NexusGenInputs['LoginInput'];
  RegisterInput: NexusGenInputs['RegisterInput'];
  UserInput: NexusGenInputs['UserInput'];
}

export interface NexusGenFieldTypes {
  AuthUser: { // field return type
    avatarURL: string | null; // String
    firstName: string; // String!
    id: string; // ID!
    isVerified: boolean; // Boolean!
    lastName: string; // String!
    token: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: { // field return type
    deleteUser: NexusGenRootTypes['User']; // User!
    loginUser: NexusGenRootTypes['AuthUser'] | null; // AuthUser
    registerUser: NexusGenRootTypes['AuthUser']; // AuthUser!
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    avatarId: string | null; // String
    avatarURL: string | null; // String
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    isVerified: boolean; // Boolean!
    lastName: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    loginUser: { // args
      loginInput: NexusGenInputs['LoginInput']; // LoginInput!
    }
    registerUser: { // args
      registerInput: NexusGenInputs['RegisterInput']; // RegisterInput!
    }
    updateUser: { // args
      userInput: NexusGenInputs['UserInput']; // UserInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthUser" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = "LoginInput" | "RegisterInput" | "UserInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}